/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
//#include "img.h"
#include "xgpio.h"
#include "sleep.h"
#include "xparameters.h"

#define GPIO_BASE_0 0x41200000;
#define GPIO_BASE_1 0x41210000;
#define GPIO_BASE_2 0x41220000;

XGpio gpio;

#define BIT0 0x01
#define BIT1 0x02
#define BIT2 0x04
#define BIT3 0x08

int main()
{
    init_platform();
    XGpio gpio0;
    XGpio gpio1;
    XGpio gpio2;

    XGpio_Initialize(&gpio0, XPAR_GPIO_0_DEVICE_ID);
    XGpio_Initialize(&gpio1, XPAR_GPIO_1_DEVICE_ID);
    XGpio_Initialize(&gpio2, XPAR_GPIO_2_DEVICE_ID);

    XGpio_SetDataDirection(&gpio0, 1, 0x00000000);			// LED
    XGpio_SetDataDirection(&gpio1, 1, 0x00000000);			// 1 bit enable
    XGpio_SetDataDirection(&gpio2, 2, 0x00000000);			// 32 bit datain
    XGpio_SetDataDirection(&gpio1, 1, 0x00000000);			// 32 bit dataout
    XGpio_SetDataDirection(&gpio2, 2, 0x00000000);			// 4 bit web

    print("Hello World\n\r");


	UINTPTR BRAM_BASEADDR = 0x40000000;
	uint32_t read_value;

	uint32_t write_value = 0b11111111111111111111111111111111;
	printf("Written value: 0x%08X\n", write_value);

	read_value = Xil_In32(BRAM_BASEADDR);
	// Print the written and read values
	printf("Read value 1:    0x%08X\n", read_value);

	Xil_Out32(BRAM_BASEADDR, write_value);

	read_value = Xil_In32(BRAM_BASEADDR);
	// Print the written and read values
	printf("Read value 2:    0x%08X\n", read_value);

    for (int i=0;i<10;i++){
    	XGpio_DiscreteWrite(&gpio, 1, BIT0);
    	usleep(100000);

    	XGpio_DiscreteWrite(&gpio, 1, BIT1);
    	usleep(100000);

    	XGpio_DiscreteWrite(&gpio, 1, BIT2);
    	usleep(100000);

    	XGpio_DiscreteWrite(&gpio, 1, BIT3);
    	usleep(100000);
    }

	read_value = Xil_In32(BRAM_BASEADDR);
	// Print the written and read values
	printf("Read value 1:    0x%08X\n", read_value);

	if (write_value != read_value) {
		printf("Test passed: Written and read values do not match.\n");
	}


//	for (int i=0;i<784;i++){
//	    Xil_Out32(BRAM_BASEADDR, img[i]);
//
//	    // Read back the value from BRAM
//	    read_value = Xil_In32(BRAM_BASEADDR);
//
//	    // Print the written and read values
//	    printf("Written value: 0x%08X\n", img[i]);
//	    printf("Read value:    0x%08X\n", read_value);
//
//	    // Compare the values
//	    if (img[i] != read_value) {
//	        printf("Test failed: Written and read values do not match.\n");
//	    }
//	}
//    uint8_t value;
//
//	/* Print initial value */
//	xil_printf("Intial value of addr 0x%08X = 0x%08X\r\n", bram_baseaddr, *(uint32_t*)bram_baseaddr);
//
//	/* Tread pointer as pointer to 32 unsigned integer and assign value */
//	*(uint32_t*)bram_baseaddr = img[0];
//
//	/* Print initial value */
//	xil_printf("New value of addr 0x%08X = 0x%08X\r\n", bram_baseaddr, *(uint32_t*)bram_baseaddr);
//
//    for(int i=0; i<10; i++)
//    {
//    	Xil_Out32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + 4*i, img[i]);
//    }
//
//    sleep(1);
//
//
//    for(int i=0; i<10; i++)
//    {
//    	value = Xil_In8(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + i);
//    	xil_printf("Value at addr %x is %8X\n", XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + i, value);
//
//    }

//    xil_printf("BREAK: 1\n\r");
//
//    for(int i=0; i<10; i++)
//    {
//    	Xil_Out8(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + i, i);
//    }
//
//    sleep(1);
//
//
//    for(int i=0; i<10; i++)
//    {
//    	value = Xil_In8(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + i);
//    	xil_printf("Value at addr %x is %x\n", XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + i, value);
//
//    }

//	float *ptr1 = &img[0];
//	int val1 = img[0];
//
//	printf("\n%0x", img[0]);
//	printf("\n0x%08X", *ptr1);
//
//	float *ptr2 = &img[1];
//	int val2 = img[1];
//
//	printf("\n%0x", img[1]);
//	printf("\n0x%08X", *ptr2);
//
//	for(int i = 0; i < 3; i++){
//		xil_printf("Old value of addr 0x%08X = 0x%08X\r\n", bram_baseaddr, *(uint32_t*)bram_baseaddr);
//		bram_baseaddr = bram_baseaddr +1;
//		*(uint32_t*)bram_baseaddr = 0xDEADBEEF;
//		xil_printf("New value of addr 0x%08X = 0x%08X\r\n", bram_baseaddr, *(uint32_t*)bram_baseaddr);
//	}
//
//	/* Tread pointer as pointer to 32 unsigned integer and assign value */
//	*(uint32_t*)bram_baseaddr = 16;
//
//	/* Print initial value */
//	xil_printf("New value of addr 0x%08X = 0x%08X\r\n", bram_baseaddr, *(uint32_t*)bram_baseaddr);

    cleanup_platform();
    return 0;
}
